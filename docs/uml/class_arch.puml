@startuml "Class Architecture"


class TypeFactory {
    +MetaType build(definition: TypeDefinition, extensions: [Extension])
}

package metatypes {
    abstract class MetaType <<metaclass>>
    class Noun {
        +get_attribute(attr_name: str): Attribute
    }

    class Verb {
        +get_attribute(attr_name: str): Attribute
    }

    class Relationship {
        +get_attribute(attr_name: str): Attribute
    }
}

package primitives {
    class Attribute {
        - type_
        - metadata
        +get_type()
        +metadata()
    }

    class Operation {
        - fn
        - metadata
        +get_fn()
        +metadata()
        +__call__()
    }
}

package extensions {
    class Extension <<decorator>> {
        +merge()
        +configure()
    }
}


MetaType <|-- Noun : metaclass
MetaType <|-- Verb : metaclass
MetaType <|-- Relationship : metaclass
Noun *-- Attribute
Noun *-- Operation
Verb *-- Attribute
Verb *-- Operation
Relationship *-- Attribute
Relationship *-- Operation

Extension *--"0..*" Attribute
Extension *--"0..*" Operation

TypeFactory .. MetaType : produces


@enduml